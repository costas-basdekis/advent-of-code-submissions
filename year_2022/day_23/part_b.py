#!/usr/bin/env python3
from dataclasses import dataclass, field
import re
from enum import Enum
from typing import (
    Any, cast, Callable, ClassVar, Dict, Generic, Iterable, List, Optional, Set,
    Tuple, Type, Union, TypeVar,
)

from aox.challenge import Debugger
from utils import (
    BaseChallenge, Point2D, get_type_argument_class, helper, Cls, Self,
)
from year_2022.day_23 import part_a


class Challenge(BaseChallenge):
    def solve(self, _input: str, debugger: Debugger) -> Union[str, int]:
        """
        >>> Challenge().default_solve()
        1057
        """
        return GroveExtended.from_scan(_input).get_step_count_to_done()


class GroveExtended(part_a.Grove):
    def get_step_count_to_done(self) -> int:
        """
        >>> _grove = GroveExtended.from_scan('''
        ...     ..............
        ...     ..............
        ...     .......#......
        ...     .....###.#....
        ...     ...#...#.#....
        ...     ....#...##....
        ...     ...#.###......
        ...     ...##.#.##....
        ...     ....#..#......
        ...     ..............
        ...     ..............
        ...     ..............
        ... ''')
        >>> _grove.get_step_count_to_done()
        20
        """
        return self.step_until_done().rounds + 1

    def step_until_done(self) -> "GroveExtended":
        """
        >>> _grove = GroveExtended.from_scan('''
        ...     ..............
        ...     ..............
        ...     .......#......
        ...     .....###.#....
        ...     ...#...#.#....
        ...     ....#...##....
        ...     ...#.###......
        ...     ...##.#.##....
        ...     ....#..#......
        ...     ..............
        ...     ..............
        ...     ..............
        ... ''')
        >>> finished_grove = _grove.step_until_done()
        >>> print("!" + str(finished_grove))
        !.......#......
        ....#......#..
        ..#.....#.....
        ......#.......
        ...#....#.#..#
        #.............
        ....#.....#...
        ..#.....#.....
        ....#.#....#..
        .........#....
        ....#......#..
        .......#......
        >>> finished_grove.rounds
        19
        """
        grove = self
        while True:
            previous = grove
            grove = grove.step()
            if previous == grove:
                break
        return grove


Challenge.main()
challenge = Challenge()
